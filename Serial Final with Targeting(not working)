from __future__ import print_function
import serial
import tkinter
import cv2
from PIL import Image, ImageTk 
import numpy as np


arduinoData = serial.Serial('COM3', 9600) # Establish the connection on a specific port
right = '0'
left= '1'
up = '2'
down = '3'
laser_message = '4'
fire_message = '5'
shape_target = ""
color_target = ""

width, height = 400, 300
cap = cv2.VideoCapture(1)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

def move_up(): 
    arduinoData.write(up.encode()) 
    print(up.encode())
def move_down():
    arduinoData.write(down.encode())
    print(down.encode())
def move_left(): 
    arduinoData.write(left.encode()) 
    print(left.encode())
def move_right():
    arduinoData.write(right.encode())
    print(right.encode())
def Laser():
    arduinoData.write(laser_message.encode())
    print(laser_message.encode())
def Fire():
    arduinoData.write(fire_message.encode())
    print(fire_message.encode())
def Identify():
    shape_target = entryShape.get()
    color_target = entryColor.get()
    print(shape_target)
    print(color_target)
def show_frame():
    _, frame = cap.read()
    #frame = cv2.flip(frame, 1)
    cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)
    img = Image.fromarray(cv2image)
    imgtk = ImageTk.PhotoImage(image=img)
    lmain.imgtk = imgtk
    lmain.configure(image=imgtk)
    lmain.after(10, show_frame)

def target(shapeT,colorT):    
    finished = False
    while finished == False:
        cam = cv2.VideoCapture(1)
        ret, frame = cam.read()
        img_name = "opencv_frame.png"
        cv2.imwrite(img_name, frame)
        print("opencv_frame written!".format(img_name))
        cam.release()
        
        #open it for color detection *******************************************
        image = cv2.imread('opencv_frame.png')
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        boundaries = [
	([56, 0, 0], [179, 115, 97]),  #blue
   ([0, 164, 0], [10, 255, 255]),  #red
	([17 , 140, 115], [174, 255, 255 ]), #yellow
    ([0, 87, 73], [10, 157, 109]),# purple
    ([37, 80, 0], [74, 255, 255])# green
    ]
        
        #colors
        blue = boundaries[0]
        red = boundaries[1]
        yellow = boundaries[2]
        purple = boundaries[3]
        green = boundaries[4]
        
        color=""
        #the color that were looking for
        if colorT=="red":
            color==red
        if colorT=="blue":
            color==blue
        if colorT=="green":
            color==green
        if colorT=="yellow":
            color==yellow
        if colorT=="purple":
            color==purple
        lower = np.array(color[0],dtype = "uint8")
        upper = np.array(color[1],dtype = "uint8")
        
        mask = cv2.inRange(hsv, lower, upper)
        output = cv2.bitwise_and(image, image, mask = mask)
        image = output
        cv2.imshow("Image", image)
        
        # Perform shape detection **********************************************
        
        # convert the color image into grayscale
        grayScale = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        # Find edges in the image using canny edge detection method
        # Calculate lower threshold and upper threshold using sigma = 0.33
        sigma = 0.33
        v = np.median(grayScale)
        low = int(max(0, (1.0 - sigma) * v))
        high = int(min(255, (1.0 + sigma) * v))
        
        edged = cv2.Canny(grayScale, low, high)
        centerShape=[0,0]
        # cv2.RETR_EXTERNAL is passed to find the outermost contours (because we want to outline the shapes)
        # cv2.CHAIN_APPROX_SIMPLE is removing redundant points along a line
        (_, cnts, _) = cv2.findContours(edged,
                                        cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        def detectShape(cnt):
            shape = 'unknown'
            # calculate perimeter using
            
            peri = cv2.arcLength(c, True)
            if peri > 50:    
                print(peri)
                # apply contour approximation and store the result in vertices
                vertices = cv2.approxPolyDP(c, 0.04 * peri, True)
            
                # If the shape it triangle, it will have 3 vertices
                if len(vertices) == 3:
                    shape = 'triangle'
            
                # if the shape has 4 vertices, it is either a square or
                # a rectangle
                elif len(vertices) == 4:
                    # using the boundingRect method calculate the width and height
                    # of enclosing rectange and then calculte aspect ratio
            
                    x, y, width, height = cv2.boundingRect(vertices)
                    aspectRatio = float(width) / height
            
                    # a square will have an aspect ratio that is approximately
                    # equal to one, otherwise, the shape is a rectangle
                    if aspectRatio >= 0.95 and aspectRatio <= 1.05:
                        shape = "square"
                    else:
                        shape = "rectangle"
            
                # if the shape is a pentagon, it will have 5 vertices
                elif len(vertices) == 5:
                    shape = "pentagon"
            
            
                elif len(vertices) == 10:
                    shape = "Star"
                # otherwise, we assume the shape is a circle
                else:
                    shape = "circle"
            
                # return the name of the shape
                
                return shape
        # Now we will loop over every contour
        # call detectShape() for it and
        # write the name of shape in the center of image
        
        # loop over the contours
        for c in cnts:
            # compute the moment of contour
            M = cv2.moments(c)
            # From moment we can calculte area, centroid etc
            # The center or centroid can be calculated as follows
            if  M['m00'] != 0:
                cX = int(M['m10'] / M['m00'])
                cY = int(M['m01'] / M['m00'])
        
            # call detectShape for contour c
            shape = detectShape(c)
            if shape != None:
                print (shape)
            if shape == shapeT:
                centerShape=[cX,cY]
        
            # Outline the contours    
            cv2.drawContours(image, [c], -1, (0, 255, 0), 2)
        
            # Write the name of shape on the center of shapes
            cv2.putText(image, shape, (cX, cY), cv2.FONT_HERSHEY_SIMPLEX,
                        0.5, (255, 255, 255), 2)
            
        
            # show the output image
            #cv2.imshow("Image", image)
        
        #cv2.waitKey(0)
        #cv2.destroyAllWindows()
            
        #begin calculation to move turret
        width = image.shape[0]
        height = image.shape[1]
        
        centerImage=[height//2,width//2]
        
        shapeH=centerShape[0]
        shapeV=centerShape[1]
        imageH=centerImage[0]
        imageV=centerImage[1]
        
        if imageH<shapeH:
            arduinoData.write(right.encode())
        if imageH>shapeH:
            arduinoData.write(left.encode())
        if imageV<shapeV:
            arduinoData.write(up.encode())
        if imageV>shapeV:
            arduinoData.write(down.encode())
            
        if imageH==shapeH and imageV==shapeV:
            arduinoData.write(fire_message.encode())
            finished = True

gui_window = tkinter.Tk()

    
Button =tkinter.Button
Entry =tkinter.Entry
Label=tkinter.Label

lmain = Label(gui_window)
lmain.grid(row=5, column=2)

MyButton1 = Button(gui_window, text="LEFT", command=move_left, width=10)
MyButton1.grid(row=3, column=1)


MyButton2 = Button(gui_window, text="UP", command=move_up ,width=10)
MyButton2.grid(row=2, column=2)

MyButton3 = Button(gui_window, text="DOWN", command=move_down ,width=10)
MyButton3.grid(row=4, column=2, pady=(0,60))


MyButton4 = Button(gui_window, text="RIGHT", command=move_right ,width=10)
MyButton4.grid(row=3, column=3, )


MyButton5 = Button(gui_window, text="FIRE",command = Fire, width=10, bg= "red")
MyButton5.grid(row=2, column=4, padx=(60,0))

MyButton6 = Button(gui_window, text="LASER",command = Laser, width=10)
MyButton6.grid(row=4, column=4, padx=(60,0))

shapeLabel=Label(gui_window,text='Enter Shape to target')
shapeLabel.grid(row=6, column=2)

entryShape = Entry(gui_window, width=30)
entryShape.grid(row=7, column=2, pady=(0,15))

colorLabel=Label(gui_window,text='Enter Color to target')
colorLabel.grid(row=8, column=2)

entryColor = Entry(gui_window, width=30)
entryColor.grid(row=9, column=2, pady=(0,15))

MyButton7 = Button(gui_window, text="SUBMIT",command = Identify, width=10)
MyButton7.grid(row=10, column=2,padx=(20,0))

MyButton8 = Button(gui_window, text="TARGET",command = lambda: target(shape_target,color_target), width=10)
MyButton8.grid(row=10, column=3)


show_frame()
gui_window.mainloop()



input ("press enter to exit") 
